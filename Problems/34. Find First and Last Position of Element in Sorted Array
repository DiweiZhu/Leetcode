1. Description

ARRAY, BINARY SEARCH, DIVIDE AND CONQUER

As the question asks, return the indices like [3,5]. If target not found, return [-1, -1]
runtime complexity O(log n)

2. Instant react

Binary search
Firstly search for the target. If target found, use binary search to find the first and the last one.
Be careful about boundary.

3. First accepted code
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int n = nums.size();
        if(n <= 0){return {-1,-1};}
        if(n == 1) {
            if(nums[0] == target) {return {0,0};}
            else {return {-1,-1};}
        }
        int low = 0, high = n - 1;
        int mid;
        while(low <= high) {
            mid = (low + high) / 2;
            if(nums[mid] > target) {high = mid - 1;}
            else if (nums[mid] < target) {low = mid + 1;}
            else {
                int low_last = mid;
                int high_last = n - 2;
                int mid_last;
                int last = n - 1;
                while(low_last <= high_last) {
                    mid_last = (low_last + high_last) / 2;
                    if(nums[mid_last] == target && nums[mid_last + 1] > target) {
                        last = mid_last;
                        break;
                    }
                    else if(nums[mid_last] > target) {high_last = mid_last - 1;}
                    else {low_last = mid_last + 1;}
                }
                int low_first = 1;
                int high_first = mid;
                int mid_first;
                int first = 0;
                while(low_first <= high_first) {
                    mid_first = (low_first + high_first) / 2;
                    if(nums[mid_first] == target && nums[mid_first - 1] < target) {
                        first = mid_first;
                        break;
                    }
                    else if(nums[mid_first] < target) {low_first = mid_first + 1;}
                    else {high_first = mid_first - 1;}
                }
                return {first, last};
            }
        }
        return {-1,-1};
    }
};

4. Revision
Scaning the whole array is the most straightforward method for this problem, with time complexity O(n).
Devide and conquer is a new method for me. Normally, the time complexity of devide and conquer is O(nlog n). However, for this problem, each time we devide the array into two parts, one of the sub-array would instantly be over, so it's O(log n).

Devide and conquer code:
class Solution {
public:
    vector<int> searchRange(vector<int>& nums, int target) {
        int n = nums.size();
        if(n <= 0){return {-1,-1};}
        if(n == 1) {
            if(nums[0] == target) {return {0,0};}
            else {return {-1,-1};}
        }
        return Search(0, n-1, nums, target);    
    }
private:
    vector<int> Search(int low, int high, vector<int>& nums, int target) {
        if(nums[low] == target && target == nums[high]) {return {low, high};}
        if(target < nums[low] || target > nums[high]) {return {-1, -1};}
        int mid = low + (high - low) / 2;
        vector<int> res_low = Search(low, mid, nums, target);
        vector<int> res_high = Search(mid + 1, high, nums, target);
        if(res_low[0] == -1) {return res_high;}
        if(res_high[0] == -1) {return res_low;}
        return {res_low[0], res_high[1]};
    }  
};

Also problem #33 can be solved using devide and conquer. Because there is no duplicate, if we devide the array into two parts, the target is in the range of one of them, which means the other one can be thrown away.

5. Summary

Two binary search is easy to conduct. 
Sometimes devide and conquer can be O(log n), if one sub-problem can be instantly solved.
